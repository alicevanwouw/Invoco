@page
@using Portal.Models
@model IndexModel

<style>
    .tab-content {
        height: 80vh;
        overflow: auto;
        padding: 2rem;
        background-color: white;
    }

    .nav-tabs {
        --bs-nav-link-color: #343a40;
        --bs-nav-link-hover-color: #81abcd;
        border-bottom: 0.2rem solid white;
    }

    .table thead {
        border-bottom: 0.1rem solid #81abcd;
        vertical-align: bottom;
    }

    .table th {
        font-weight: 480;
        border: none;
    }

    .table td {
        border: none;
    }

    .table-container {
        max-height: 60vh;
        overflow-y: auto;
        background-color: white;
        border-radius: 0.375rem;
        box-shadow: 0 0 0.25rem rgba(0, 0, 0, 0.05);
    }

    .btn-filter {
        background-color: #81abcd;
        border: none;
        transition: background-color 0.2s ease-in-out;
    }

    .btn-filter:hover {
        background-color: #81abcd;
    }

    .sortable-header {
        color: #004080; /* dark blue */
        font-weight: bold;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 4px;
    }

        .sortable-header:hover {
            text-decoration: underline;
            color: #002f5f;
        }

        .sortable-header i {
            font-size: 0.85em;
        }
</style>

<div class="container-fluid h-100">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a class="nav-link active" data-bs-toggle="tab" href="#overview">Overview</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-bs-toggle="tab" href="#analytics">Analytics</a>
        </li>
    </ul>

    <div class="tab-content">
        <div class="tab-pane fade show active" id="overview">
            <div class="container-fluid">
                <div class="d-flex justify-content-end gap-2">
                    <form method="get" class="d-flex align-items-center gap-3 mb-3">
                        <div class="d-flex align-items-center">
                            <label for="startDate" class="me-2 text-nowrap">Start Date:</label>
                            <input type="date" id="startDate" name="StartDate" class="form-control" value="@Model.StartDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="d-flex align-items-center">
                            <label for="endDate" class="me-2 text-nowrap">End Date:</label>
                            <input type="date" id="endDate" name="EndDate" class="form-control" value="@Model.EndDate?.ToString("yyyy-MM-dd")" />
                        </div>
                        <div class="d-flex align-items-center">
                            <label for="endpoint" class="me-2 text-nowrap">Endpoint:</label>
                            <input type="text" id="endpoint" name="Endpoint" class="form-control"
                            value="@Model.Endpoint" placeholder="/contacts/add" />
                        </div>

                        <div class="d-flex align-items-center">
                            <label for="statusCode" class="me-2 text-nowrap">Status Code:</label>
                            <input type="number" id="statusCode" name="StatusCode" class="form-control"
                            value="@(Model.StatusCode?.ToString())" placeholder="200" />
                        </div>
                        <button type="submit" class="btn btn-primary btn-filter">Filter</button>
                        <a href="/" class="btn btn-secondary">Clear</a>
                    </form>
                </div>
            </div>

            <div class="table-container">
                <table class="table table-bordered table-hover shadow-sm">
                    @{
                        string ToggleDirection(string column) =>
                        (Model.SortBy == column && Model.SortDirection == "Asc") ? "Desc" : "Asc";
                    }
                    <thead class="table-light">
                        <tr>
                            @foreach (var prop in typeof(CallEventModel).GetProperties())
                            {
                                if (prop.Name.Equals("Id"))
                                {
                                    continue; // Skip Id entirely
                                }

                                var propName = prop.Name;
                                if (propName == "Notes")
                                {
                                    <th>@propName</th>
                                }
                                else
                                {
                                    var isSorted = Model.SortBy == propName;
                                    var sortDirection = isSorted && Model.SortDirection == "Asc" ? "Desc" : "Asc";
                                    var icon = isSorted ? $"bi bi-arrow-{(Model.SortDirection == "Asc" ? "up" : "down")}" : "";

                                    <th>
                                        <a class="sortable-header"
                                           data-bs-toggle="tooltip"
                                           data-bs-placement="top"
                                           title="Click to sort"
                                           asp-page="Index"
                                           asp-route-SortBy="@propName"
                                           asp-route-SortDirection="@sortDirection"
                                           asp-route-StartDate="@Model.StartDate"
                                           asp-route-EndDate="@Model.EndDate"
                                           asp-route-Endpoint="@Model.Endpoint"
                                           asp-route-StatusCode="@Model.StatusCode">
                                            @propName
                                            @if (!string.IsNullOrEmpty(icon))
                                            {
                                                <i class="@icon"></i>
                                            }
                                        </a>
                                    </th>
                                }
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @if (Model.CallLogs.Any())
                        {
                            foreach (var log in Model.CallLogs)
                            {
                                <tr>
                                    @foreach (var prop in typeof(CallEventModel).GetProperties())
                                    {
                                        if (prop.Name == "Id")
                                        {
                                            continue; 
                                        }

                                        <td>
                                            @{
                                                if (prop.Name == "Notes")
                                                {
                                                    @if (log.Notes?.Any() == true)
                                                    {
                                                        var serialized = Json.Serialize(log.Notes);
                                                        <button type="button"
                                                                class="btn btn-sm btn-outline-primary"
                                                                data-bs-toggle="modal"
                                                                data-bs-target="#noteModal"
                                                                data-note='@Html.Raw(serialized)'>
                                                            <i class="bi bi-sticky"
                                                               data-bs-toggle="tooltip"
                                                               data-bs-placement="top"
                                                               title="Read notes"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-sm btn-outline-secondary"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#editNoteModal"
                                                            data-id="@log.Id">
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    var value = prop.GetValue(log);
                                                    if (value is DateTime dt)
                                                    {
                                                        @dt.ToString("yyyy-MM-dd HH:mm:ss")
                                                    }
                                                    else
                                                    {
                                                        @value
                                                    }
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="@typeof(CallEventModel).GetProperties().Count(p => p.Name != "Id")" class="text-center text-muted">
                                    No call logs found.
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>

        <div class="tab-pane fade" id="analytics">
            <div class="container-fluid">
                <div class="card p-4 shadow-sm">
                    <p>Analytics placeholder content here</p>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="noteModal" tabindex="-1" aria-labelledby="noteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="noteModalLabel">Note Content</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="noteModalBody">
                    <ul id="noteList" class="list-group"></ul>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editNoteModal" tabindex="-1" aria-labelledby="editNoteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="noteModalLabel">Add Note</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="editNoteModalBody">
                    <textarea id="newNote" class="form-control mb-3" rows="4" placeholder="Enter new note..."></textarea>
                    <button type="button" class="btn btn-primary" id="submitNoteBtn">Add Note</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const noteModal = document.getElementById('noteModal');
    noteModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget;
        const notesRaw = button.getAttribute('data-note');
        const notes = JSON.parse(notesRaw || "[]");
        const list = noteModal.querySelector('#noteList');
        list.innerHTML = "";

        if (notes.length === 0) {
            list.innerHTML = "<li class='list-group-item text-muted'>No notes available.</li>";
        } else {
            notes.forEach(note => {
                const item = document.createElement("li");
                item.className = "list-group-item";
                item.textContent = note;
                list.appendChild(item);
            });
        }
    });

    let currentLogId = null;

     const editNoteModal = document.getElementById('editNoteModal');
     editNoteModal.addEventListener('show.bs.modal', function (event) {
         const button = event.relatedTarget;
         currentLogId = button.getAttribute('data-id');
         document.getElementById('newNote').value = "";
     });

     document.getElementById('submitNoteBtn').addEventListener('click', async () => {
         const noteText = document.getElementById('newNote').value.trim();
         console.log(currentLogId);
         if (!noteText || !currentLogId) return;
         const apiBaseUrl = "@Model.baseUrl";
         const response = await fetch(`${apiBaseUrl}/callevent/${currentLogId}/note`, {
             method: 'PUT',
             headers: { 'Content-Type': 'application/json' },
             body: JSON.stringify({ note: noteText })
         });

         if (response.ok) {
             bootstrap.Modal.getInstance(editNoteModal)?.hide();
             location.reload(); 
         } else {
             alert("Failed to add note.");
         }
     });

    document.addEventListener("DOMContentLoaded", function () {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>
